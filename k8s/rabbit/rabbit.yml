kind: Service
apiVersion: v1
metadata:
  name: rabbitmq
spec:
  clusterIP: None  # We need a headless service to allow the pods to discover each
  ports:           # other during autodiscover phase for cluster creation.
   - name: http    # A ClusterIP will prevent resolving dns requests for other pods
     protocol: TCP # under the same service.
     port: 15672
     targetPort: 15672
   - name: amqp
     protocol: TCP
     port: 5672
     targetPort: 5672
  selector:
    app: rabbitmq
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  selector:
    matchLabels:
      app: rabbitmq
  serviceName: rabbitmq
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      terminationGracePeriodSeconds: 10
      imagePullSecrets:
      - name: hub.docker.com
      containers:
      - name: rabbitmq
        image: semweb/caphub_rabbit:latest
        imagePullPolicy: Always
        ports:
          - name: http
            protocol: TCP
            containerPort: 15672
          - name: amqp
            protocol: TCP
            containerPort: 5672
        readinessProbe:           # This readiness probe will delay the startup of the nex pod for 30 seconds. It ensures
          exec:                   # the node is most probably in a state that let the next node connect to this one.
            command: ["true"]     # Doing a real liveness or readiness probe will result in a stuck statfult set if the
          initialDelaySeconds: 30 # cluster is in a "pause_minority" state. In this state all health checks provided
          timeoutSeconds: 5       # by rabbitmq will fail, but the node should _not_ be restarted.
        env:
          - name: RABBITMQ_DEFAULT_USER
            value: adm
          - name: RABBITMQ_DEFAULT_PASS
            value: admpass
          - name: RABBITMQ_NODENAME
            value: cap@rabbitmq
        volumeMounts:
          - name: rabbitmq-persistent-storage
            mountPath: /var/lib/rabbitmq
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-persistent-storage
      annotations:
        volume.beta.kubernetes.io/storage-class: standard
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

